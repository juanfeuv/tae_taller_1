# -*- coding: utf-8 -*-
"""Anexo 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KIo5NZxLy3vgqoetGRrKN1au8xaYAOp4

Análisis de componentes principales
"""

!pip install missingno

"""Importamos librerias"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import sklearn
import scipy.cluster.hierarchy as hcluster
import missingno as msno


from sklearn.decomposition import PCA
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import scale

"""importamos el dataset"""

#Para abrir desde colab
url = 'https://raw.githubusercontent.com/Jurregoz/tae_trabajo_1/main/CollegeScorecard.csv'
college = pd.read_csv(url)

percent= college.isnull().sum() * 100 / len(college)
missing_value_df = pd.DataFrame({'column_name': college.columns,
                                 'percent_missing': percent})

print("porcentaje de valores faltantes")
missing_value_df.loc[missing_value_df['percent_missing']>60]

msno.matrix(college)

college.info()

"""Filtramos por las universidades que estan activas"""

colleges = college[['CONTROL', 'HCM2', 'ADM_RATE_ALL', 'COSTT4_P', 'COSTT4_A', 'TUITIONFEE_IN', 'TUITIONFEE_OUT', 'TUITIONFEE_PROG', 'INC_PCT_LO', 'INC_PCT_M1', 'INC_PCT_M2', 'INC_PCT_H1', 'INC_PCT_H2']]

colleges.head()

colleges = colleges.replace('PrivacySuppressed', np.nan)

"""extraemos las variables con datos faltantes para empezar a filtrar """

conna=college[['INSTNM', 'CONTROL', 'HCM2', 'COSTT4_P', 'COSTT4_A', 'TUITIONFEE_IN', 'TUITIONFEE_OUT', 'TUITIONFEE_PROG', 'STABBR', 'INC_PCT_LO', 'INC_PCT_M1', 'INC_PCT_M2', 'INC_PCT_H1', 'INC_PCT_H2']]
msno.matrix(conna)

percent= colleges.isnull().sum() * 100 / len(colleges)
missing_value_df = pd.DataFrame({'column_name': colleges.columns,
                                 'percent_missing': percent})

print("porcentaje de valores faltantes")
missing_value_df#.loc[missing_value_df['percent_missing']!=0]

"""filtramos seegun las variables faltantes y las de interes tomadas basandose en la documentación

buscamos variables que esten correlacionadas
"""

corr = colleges.corr()
corr.style.background_gradient(cmap='coolwarm')

corr2 = colleges.corr()
corr2.style.background_gradient(cmap='coolwarm')

"""#realizamos imputación de datos 2 caminos para ejemplificar:

*   drop.na() ->nos quedamos sin datos
*   igualar los valores na a la media
"""

newcol = colleges.astype(float, errors = 'raise')

newcol=newcol.fillna(newcol.mean())

"""#Analisis de componentes principales



*   El modelo no es bueno de manera inemdiata porue no se hizo uso de los filtros para el tipo de institución


"""

pca_pipe = make_pipeline(StandardScaler(), PCA())
#falta el modelo de imputación que usó vladimir (nueva implementación)
pca_pipe.fit(newcol)

# Se extrae el modelo entrenado del pipeline
modelo_pca = pca_pipe.named_steps['pca']

# Se convierte el array a dataframe para añadir nombres a los ejes.
componentes=pd.DataFrame(
    data    = modelo_pca.components_,
    columns = newcol.columns,
    index   = ['PC1', 'PC2', 'PC3', 'PC4','PC5','PC6','PC7','PC8','PC9','PC10','PC11','PC12','PC13']
)

tcompo=np.transpose(componentes)
tcompo

"""#PC1


inc_pct_h2: 0.403692
Porcentaje de estudiantes dados los ingresos familiares.
($110,001+)

INC_PCT_LO:	-0.394592
Porcentaje de estudiantes dados los ingresos familiares.
(0-$30,000)

INC_PCT_H1:	0.380315
Porcentaje de estudiantes dados los ingresos familiares
(75,001-$110,000)

INC_PCT_LO:	-0.394592
Porcentaje de estudiantes dados los ingresos familiares.
(0-$30,000)

TUITIONFEE_OUT:	0.386791
Costo y tasas de matrícula para estudiantes de fuera del estado.

TUITIONFEE_IN:	0.369222
Costo y tasas de matrícula para estudiantes de dentro del estado

COSTT4_A:	0.363902
Costo de asistencia anual general para todos los estudiantes.

#PC2
CONTROL: 0.462428 Identifica si la estructura de gobierno de la institución es:
pública (1),
privada sin ánimo de lucro (2)
privada con ánimo de lucro (3).

costt4_a: 0.368320 Costo de asistencia anual general para todos los estudiantes.

ttf in: 0.368683 Costo y tasas de matrícula para estudiantes de dentro del estado

pct_m1 : -0.362502 Porcentaje de estudiantes dados los ingresos familiares.
(30,001-$48,000)

pct_m2 : -0.363271 Porcentaje de estudiantes dados los ingresos familiares.
(48,001-$75,000)

#PC3

COSTT4_P: 0.666329 Es el costo de asistencia tomado del programa académico más cursado durante el año.

TUITIONFEE_PROG:0.682751
Costo y tasas de matrícula general, tanto si es fuera o dentro del estado, esto son aquellas universidades que no cobran alguna diferencia por esto.
"""

fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 4))
ax.bar(
    x      = np.arange(modelo_pca.n_components_) + 1,
    height = modelo_pca.explained_variance_ratio_
)

for x, y in zip(np.arange(len(newcol.columns)) + 1, modelo_pca.explained_variance_ratio_):
    label = round(y, 2)
    ax.annotate(
        label,
        (x,y),
        textcoords="offset points",
        xytext=(0,10),
        ha='center'
    )

ax.set_xticks(np.arange(modelo_pca.n_components_) + 1)
ax.set_ylim(0, 1.1)
ax.set_title('Porcentaje de varianza explicada por cada componente')
ax.set_xlabel('Componente principal')
ax.set_ylabel('Por. varianza explicada');

prop_varianza_acum = modelo_pca.explained_variance_ratio_.cumsum()

fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(6, 4))
ax.plot(
    np.arange(len(newcol.columns)) + 1,
    prop_varianza_acum,
    marker = 'o'
)

for x, y in zip(np.arange(len(newcol.columns)) + 1, prop_varianza_acum):
    label = round(y, 2)
    ax.annotate(
        label,
        (x,y),
        textcoords="offset points",
        xytext=(0,10),
        ha='center'
    )
    
ax.set_ylim(0, 1.1)
ax.set_xticks(np.arange(modelo_pca.n_components_) + 1)
ax.set_title('Porcentaje de varianza explicada acumulada')
ax.set_xlabel('Componente principal')
ax.set_ylabel('Por. varianza acumulada');